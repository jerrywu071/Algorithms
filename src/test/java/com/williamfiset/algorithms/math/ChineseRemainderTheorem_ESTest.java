/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 29 01:51:11 GMT 2024
 */

package com.williamfiset.algorithms.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.williamfiset.algorithms.math.ChineseRemainderTheorem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChineseRemainderTheorem_ESTest extends ChineseRemainderTheorem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChineseRemainderTheorem chineseRemainderTheorem0 = new ChineseRemainderTheorem();
      long[] longArray0 = new long[3];
      longArray0[0] = 764L;
      longArray0[1] = 2L;
      longArray0[2] = 2L;
      ChineseRemainderTheorem.reduce(longArray0, longArray0);
      long[] longArray1 = new long[7];
      longArray1[0] = 392L;
      longArray1[1] = 0L;
      longArray1[2] = 3L;
      longArray1[3] = 1188L;
      longArray1[4] = 0L;
      longArray1[5] = (-11L);
      longArray1[6] = (-614L);
      long[] longArray2 = new long[4];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 1L;
      longArray2[3] = (-1L);
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.reduce(longArray2, longArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ChineseRemainderTheorem chineseRemainderTheorem0 = new ChineseRemainderTheorem();
      long[] longArray0 = new long[4];
      longArray0[0] = 2843L;
      longArray0[1] = 1L;
      longArray0[2] = 426L;
      longArray0[3] = 13044L;
      ChineseRemainderTheorem.reduce(longArray0, longArray0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.reduce((long[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = ChineseRemainderTheorem.eliminateCoefficient(1L, 6634L, 213931831L);
      long[] longArray1 = ChineseRemainderTheorem.crt(longArray0, longArray0);
      ChineseRemainderTheorem.reduce(longArray1, longArray0);
      long[] longArray2 = ChineseRemainderTheorem.crt(longArray1, longArray0);
      ChineseRemainderTheorem.reduce(longArray0, longArray1);
      long[] longArray3 = new long[6];
      longArray3[0] = 213931831L;
      longArray3[1] = 37L;
      longArray3[3] = 213931831L;
      long long0 = 0L;
      longArray3[4] = 0L;
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.reduce(longArray3, longArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChineseRemainderTheorem chineseRemainderTheorem0 = new ChineseRemainderTheorem();
      long[] longArray0 = new long[4];
      longArray0[0] = 4246L;
      longArray0[1] = 1619L;
      longArray0[2] = 2406L;
      longArray0[3] = 9L;
      long[] longArray1 = new long[1];
      longArray1[0] = 4246L;
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.reduce(longArray0, longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(2139318310);
      long long0 = 10L;
      long[] longArray0 = ChineseRemainderTheorem.eliminateCoefficient(10L, (-498L), 3014L);
      ChineseRemainderTheorem.reduce(longArray0, longArray0);
      long long1 = (-33L);
      long[] longArray1 = ChineseRemainderTheorem.eliminateCoefficient((-33L), (-33L), 10L);
      ChineseRemainderTheorem.reduce(longArray0, longArray0);
      long[] longArray2 = ChineseRemainderTheorem.crt(longArray1, longArray1);
      long[] longArray3 = ChineseRemainderTheorem.eliminateCoefficient(1274L, 2139318310, 617L);
      int int0 = (-2013);
      Random.setNextRandom((-2013));
      ChineseRemainderTheorem.reduce(longArray1, longArray3);
      ChineseRemainderTheorem.reduce(longArray1, longArray0);
      ChineseRemainderTheorem.reduce(longArray3, longArray3);
      long[] longArray4 = new long[3];
      longArray4[0] = (long) 2139318310;
      longArray4[1] = 1274L;
      longArray4[2] = (long) 2139318310;
      ChineseRemainderTheorem.reduce(longArray4, longArray4);
      ChineseRemainderTheorem.crt(longArray1, longArray3);
      ChineseRemainderTheorem.crt(longArray2, longArray1);
      ChineseRemainderTheorem.eliminateCoefficient(1274L, 0L, 617L);
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.reduce(longArray4, longArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = 3L;
      long long1 = 912L;
      long[] longArray0 = ChineseRemainderTheorem.eliminateCoefficient(3L, 3L, 912L);
      long[] longArray1 = ChineseRemainderTheorem.eliminateCoefficient(912L, 3L, 3L);
      ChineseRemainderTheorem chineseRemainderTheorem0 = new ChineseRemainderTheorem();
      long[] longArray2 = new long[9];
      longArray2[0] = 3L;
      longArray2[1] = 912L;
      longArray2[2] = 912L;
      longArray2[3] = 3L;
      longArray2[4] = 912L;
      longArray2[5] = 3L;
      longArray2[6] = 912L;
      longArray2[7] = 912L;
      longArray2[8] = 3L;
      ChineseRemainderTheorem.reduce(longArray1, longArray2);
      ChineseRemainderTheorem.reduce(longArray0, longArray0);
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.reduce(longArray0, longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ChineseRemainderTheorem chineseRemainderTheorem0 = new ChineseRemainderTheorem();
      long[] longArray0 = new long[7];
      longArray0[0] = 2694L;
      longArray0[1] = (-750L);
      longArray0[2] = 3725L;
      longArray0[3] = 0L;
      longArray0[4] = 4593L;
      longArray0[5] = 0L;
      longArray0[6] = (-1L);
      long[] longArray1 = new long[2];
      longArray1[0] = 3725L;
      longArray1[1] = 0L;
      // Undeclared exception!
      ChineseRemainderTheorem.reduce(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ChineseRemainderTheorem.eliminateCoefficient(0L, (-1L), (-345L));
      ChineseRemainderTheorem chineseRemainderTheorem0 = new ChineseRemainderTheorem();
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.eliminateCoefficient((-1L), 3L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ChineseRemainderTheorem chineseRemainderTheorem0 = new ChineseRemainderTheorem();
      long[] longArray0 = new long[7];
      longArray0[0] = 392L;
      longArray0[1] = 0L;
      longArray0[2] = 3L;
      longArray0[3] = 1188L;
      longArray0[4] = 0L;
      longArray0[5] = (-11L);
      longArray0[6] = (-614L);
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.reduce(longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ChineseRemainderTheorem chineseRemainderTheorem0 = new ChineseRemainderTheorem();
      long[] longArray0 = new long[8];
      longArray0[0] = 2688L;
      longArray0[1] = 1L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = (-72L);
      longArray0[5] = (-1399L);
      longArray0[6] = 0L;
      longArray0[7] = 368L;
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.reduce(longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 2059L;
      longArray0[1] = 845L;
      longArray0[2] = 2L;
      longArray0[3] = 0L;
      longArray0[4] = (-396L);
      longArray0[5] = 388L;
      longArray0[6] = (-2991L);
      longArray0[7] = (-2263L);
      longArray0[8] = (-1L);
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.reduce(longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ChineseRemainderTheorem chineseRemainderTheorem0 = new ChineseRemainderTheorem();
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = (-1835L);
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.reduce(longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      longArray0[2] = 514L;
      longArray0[3] = 3931L;
      longArray0[4] = (-1L);
      longArray0[5] = 0L;
      longArray0[6] = 1L;
      longArray0[7] = 1157L;
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.crt(longArray0, longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long[] longArray0 = null;
      long[] longArray1 = new long[3];
      longArray1[0] = 4136L;
      longArray1[1] = 0L;
      long long0 = (-1075L);
      longArray1[2] = (-1075L);
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.reduce((long[]) null, longArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-328L);
      long[] longArray1 = new long[4];
      longArray1[0] = (-328L);
      longArray1[1] = (-328L);
      longArray1[2] = (-328L);
      longArray1[3] = (-328L);
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.crt(longArray0, longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[0];
      ChineseRemainderTheorem.reduce(longArray0, longArray0);
      ChineseRemainderTheorem chineseRemainderTheorem0 = new ChineseRemainderTheorem();
      ChineseRemainderTheorem.reduce(longArray0, longArray0);
      ChineseRemainderTheorem.crt(longArray0, longArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ChineseRemainderTheorem chineseRemainderTheorem0 = new ChineseRemainderTheorem();
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.reduce(longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ChineseRemainderTheorem chineseRemainderTheorem0 = new ChineseRemainderTheorem();
      long[] longArray0 = new long[1];
      longArray0[0] = 2140L;
      ChineseRemainderTheorem.reduce(longArray0, longArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 3L;
      long[] longArray1 = new long[3];
      longArray1[0] = 3L;
      longArray1[1] = 3L;
      longArray1[2] = 3L;
      ChineseRemainderTheorem.reduce(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.crt(longArray0, longArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = 0L;
      long long1 = 0L;
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.eliminateCoefficient(802L, 0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = 2669L;
      ChineseRemainderTheorem.eliminateCoefficient(2669L, 2304L, 2669L);
      long[] longArray0 = new long[2];
      longArray0[0] = 2669L;
      longArray0[1] = 2669L;
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.crt(longArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = 4900L;
      long[] longArray0 = ChineseRemainderTheorem.eliminateCoefficient(4900L, 0L, 2936L);
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.reduce(longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long[] longArray0 = ChineseRemainderTheorem.eliminateCoefficient((-2289L), 1L, (-3641L));
      ChineseRemainderTheorem.crt(longArray0, longArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2L;
      ChineseRemainderTheorem.reduce(longArray0, longArray0);
      ChineseRemainderTheorem chineseRemainderTheorem0 = new ChineseRemainderTheorem();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ChineseRemainderTheorem.eliminateCoefficient(429L, 429L, 429L);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long[] longArray0 = ChineseRemainderTheorem.eliminateCoefficient(25L, 25L, 3014L);
      ChineseRemainderTheorem.reduce(longArray0, longArray0);
      ChineseRemainderTheorem.eliminateCoefficient(3014L, 25L, 3014L);
      ChineseRemainderTheorem.crt(longArray0, longArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ChineseRemainderTheorem chineseRemainderTheorem0 = new ChineseRemainderTheorem();
      long[] longArray0 = new long[3];
      longArray0[0] = 168L;
      longArray0[1] = 196L;
      longArray0[2] = 196L;
      long[] longArray1 = ChineseRemainderTheorem.eliminateCoefficient(196L, 168L, 168L);
      ChineseRemainderTheorem.reduce(longArray1, longArray0);
      ChineseRemainderTheorem.reduce(longArray0, longArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 202L;
      longArray0[4] = 2L;
      long[] longArray1 = new long[20];
      longArray1[0] = 202L;
      longArray1[1] = 5L;
      longArray1[3] = 202L;
      longArray1[4] = 5L;
      longArray1[2] = 202L;
      ChineseRemainderTheorem.reduce(longArray0, longArray1);
      // Undeclared exception!
      try { 
        ChineseRemainderTheorem.reduce(longArray1, longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.williamfiset.algorithms.math.ChineseRemainderTheorem", e);
      }
  }
}
