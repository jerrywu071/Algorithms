/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 29 02:09:29 GMT 2024
 */

package com.williamfiset.algorithms.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.williamfiset.algorithms.math.ModularInverse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ModularInverse_ESTest extends ModularInverse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Long long0 = ModularInverse.modInv((-1016L), 422L);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModularInverse.modInv(3092L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // mod must be > 0
         //
         verifyException("com.williamfiset.algorithms.math.ModularInverse", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Long long0 = ModularInverse.modInv(1L, 1L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Long long0 = ModularInverse.modInv(1122L, 25L);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Long long0 = ModularInverse.modInv(2317L, 1122L);
      assertEquals(415L, (long)long0);
      assertNotNull(long0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModularInverse.modInv((-2066L), (-2066L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // mod must be > 0
         //
         verifyException("com.williamfiset.algorithms.math.ModularInverse", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ModularInverse modularInverse0 = new ModularInverse();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ModularInverse.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }
}
