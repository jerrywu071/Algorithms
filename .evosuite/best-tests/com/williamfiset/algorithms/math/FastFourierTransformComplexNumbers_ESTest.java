/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 29 02:04:26 GMT 2024
 */

package com.williamfiset.algorithms.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.williamfiset.algorithms.math.FastFourierTransformComplexNumbers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastFourierTransformComplexNumbers_ESTest extends FastFourierTransformComplexNumbers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex(0.0, 0.0);
      FastFourierTransformComplexNumbers.Complex[] fastFourierTransformComplexNumbers_ComplexArray0 = new FastFourierTransformComplexNumbers.Complex[0];
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex1 = new FastFourierTransformComplexNumbers.Complex((-1661.83125548), (-2208.845));
      fastFourierTransformComplexNumbers_Complex0.i = (-2102.0);
      fastFourierTransformComplexNumbers_Complex0.plus(fastFourierTransformComplexNumbers_Complex1);
      FastFourierTransformComplexNumbers.fft(fastFourierTransformComplexNumbers_ComplexArray0);
      double double0 = (-2112.44797);
      double double1 = 1232.365;
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex2 = null;
      fastFourierTransformComplexNumbers_Complex0.times(fastFourierTransformComplexNumbers_Complex2);
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex3 = new FastFourierTransformComplexNumbers.Complex(double0, double1);
      fastFourierTransformComplexNumbers_Complex0.scalar(double1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FastFourierTransformComplexNumbers.Complex[] fastFourierTransformComplexNumbers_ComplexArray0 = new FastFourierTransformComplexNumbers.Complex[5];
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex(0.0, 0.0);
      fastFourierTransformComplexNumbers_ComplexArray0[0] = fastFourierTransformComplexNumbers_Complex0;
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex1 = new FastFourierTransformComplexNumbers.Complex(0.0, (-787.0));
      fastFourierTransformComplexNumbers_ComplexArray0[1] = fastFourierTransformComplexNumbers_Complex1;
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex2 = new FastFourierTransformComplexNumbers.Complex(0.0, (-787.0));
      fastFourierTransformComplexNumbers_ComplexArray0[2] = fastFourierTransformComplexNumbers_Complex2;
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex3 = new FastFourierTransformComplexNumbers.Complex(0.0, 1.0);
      fastFourierTransformComplexNumbers_Complex2.minus(fastFourierTransformComplexNumbers_Complex3);
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex4 = new FastFourierTransformComplexNumbers.Complex(0.0, 0.0);
      fastFourierTransformComplexNumbers_ComplexArray0[3] = fastFourierTransformComplexNumbers_Complex4;
      fastFourierTransformComplexNumbers_Complex0.scalar((-787.0));
      fastFourierTransformComplexNumbers_Complex4.r = 0.0;
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex5 = new FastFourierTransformComplexNumbers.Complex(0.0, 2146.665153068241);
      fastFourierTransformComplexNumbers_Complex1.minus(fastFourierTransformComplexNumbers_Complex2);
      fastFourierTransformComplexNumbers_Complex5.scalar((-234.952250505));
      fastFourierTransformComplexNumbers_Complex4.i = 0.0;
      fastFourierTransformComplexNumbers_Complex2.plus(fastFourierTransformComplexNumbers_Complex0);
      fastFourierTransformComplexNumbers_ComplexArray0[4] = fastFourierTransformComplexNumbers_Complex5;
      FastFourierTransformComplexNumbers.fft(fastFourierTransformComplexNumbers_ComplexArray0);
      fastFourierTransformComplexNumbers_Complex0.plus(fastFourierTransformComplexNumbers_Complex5);
      fastFourierTransformComplexNumbers_Complex4.scalar(0.0);
      // Undeclared exception!
      try { 
        FastFourierTransformComplexNumbers.fft((FastFourierTransformComplexNumbers.Complex[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.williamfiset.algorithms.math.FastFourierTransformComplexNumbers", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex(248.6669647715, 248.6669647715);
      FastFourierTransformComplexNumbers.Complex[] fastFourierTransformComplexNumbers_ComplexArray0 = new FastFourierTransformComplexNumbers.Complex[6];
      fastFourierTransformComplexNumbers_ComplexArray0[0] = fastFourierTransformComplexNumbers_Complex0;
      fastFourierTransformComplexNumbers_ComplexArray0[1] = fastFourierTransformComplexNumbers_Complex0;
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex1 = new FastFourierTransformComplexNumbers.Complex(248.6669647715, 0.0);
      fastFourierTransformComplexNumbers_ComplexArray0[2] = fastFourierTransformComplexNumbers_Complex1;
      fastFourierTransformComplexNumbers_ComplexArray0[3] = fastFourierTransformComplexNumbers_Complex0;
      fastFourierTransformComplexNumbers_ComplexArray0[4] = fastFourierTransformComplexNumbers_Complex0;
      fastFourierTransformComplexNumbers_ComplexArray0[5] = fastFourierTransformComplexNumbers_Complex0;
      // Undeclared exception!
      try { 
        FastFourierTransformComplexNumbers.fft(fastFourierTransformComplexNumbers_ComplexArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.williamfiset.algorithms.math.FastFourierTransformComplexNumbers$Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastFourierTransformComplexNumbers.Complex[] fastFourierTransformComplexNumbers_ComplexArray0 = new FastFourierTransformComplexNumbers.Complex[3];
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex(0.0, 0.0);
      fastFourierTransformComplexNumbers_ComplexArray0[0] = fastFourierTransformComplexNumbers_Complex0;
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex1 = new FastFourierTransformComplexNumbers.Complex((-1.0), 1.0);
      fastFourierTransformComplexNumbers_ComplexArray0[1] = fastFourierTransformComplexNumbers_Complex1;
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex2 = new FastFourierTransformComplexNumbers.Complex((-1.0), 0.0);
      fastFourierTransformComplexNumbers_ComplexArray0[2] = fastFourierTransformComplexNumbers_Complex2;
      FastFourierTransformComplexNumbers.Complex[] fastFourierTransformComplexNumbers_ComplexArray1 = FastFourierTransformComplexNumbers.fft(fastFourierTransformComplexNumbers_ComplexArray0);
      assertEquals(3, fastFourierTransformComplexNumbers_ComplexArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastFourierTransformComplexNumbers.Complex[] fastFourierTransformComplexNumbers_ComplexArray0 = new FastFourierTransformComplexNumbers.Complex[0];
      FastFourierTransformComplexNumbers.fft(fastFourierTransformComplexNumbers_ComplexArray0);
      double double0 = 0.0;
      double double1 = 114.658675501083;
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex(double0, double1);
      double double2 = (-3756.927660083458);
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex1 = new FastFourierTransformComplexNumbers.Complex(double2, double2);
      fastFourierTransformComplexNumbers_Complex0.plus(fastFourierTransformComplexNumbers_Complex1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastFourierTransformComplexNumbers fastFourierTransformComplexNumbers0 = new FastFourierTransformComplexNumbers();
      FastFourierTransformComplexNumbers.Complex[] fastFourierTransformComplexNumbers_ComplexArray0 = new FastFourierTransformComplexNumbers.Complex[1];
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex(0.0, 0.0);
      fastFourierTransformComplexNumbers_ComplexArray0[0] = fastFourierTransformComplexNumbers_Complex0;
      FastFourierTransformComplexNumbers.Complex[] fastFourierTransformComplexNumbers_ComplexArray1 = FastFourierTransformComplexNumbers.fft(fastFourierTransformComplexNumbers_ComplexArray0);
      assertNotSame(fastFourierTransformComplexNumbers_ComplexArray0, fastFourierTransformComplexNumbers_ComplexArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex(1524.0, (-1.0));
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex1 = fastFourierTransformComplexNumbers_Complex0.conjugate();
      assertNotSame(fastFourierTransformComplexNumbers_Complex0, fastFourierTransformComplexNumbers_Complex1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex(1304.9890623430342, (-5526.1287933));
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex1 = new FastFourierTransformComplexNumbers.Complex((-2090.21082842), 1304.9890623430342);
      fastFourierTransformComplexNumbers_Complex0.times(fastFourierTransformComplexNumbers_Complex1);
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex2 = fastFourierTransformComplexNumbers_Complex0.scalar(1304.9890623430342);
      assertFalse(fastFourierTransformComplexNumbers_Complex2.equals((Object)fastFourierTransformComplexNumbers_Complex0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex(2470.570025, (-268.7287));
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex1 = new FastFourierTransformComplexNumbers.Complex(0.0, 3192.4229921356455);
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex2 = fastFourierTransformComplexNumbers_Complex0.times(fastFourierTransformComplexNumbers_Complex1);
      assertNotSame(fastFourierTransformComplexNumbers_Complex1, fastFourierTransformComplexNumbers_Complex2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex((-1.0), (-1.0));
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex1 = new FastFourierTransformComplexNumbers.Complex((-1.0), 0.0);
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex2 = fastFourierTransformComplexNumbers_Complex0.minus(fastFourierTransformComplexNumbers_Complex1);
      assertNotSame(fastFourierTransformComplexNumbers_Complex0, fastFourierTransformComplexNumbers_Complex2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex((-1770.20666884773), 0.0);
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex1 = new FastFourierTransformComplexNumbers.Complex(338.7390916, 0.0);
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex2 = fastFourierTransformComplexNumbers_Complex0.plus(fastFourierTransformComplexNumbers_Complex1);
      assertFalse(fastFourierTransformComplexNumbers_Complex2.equals((Object)fastFourierTransformComplexNumbers_Complex0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex((-1.0), (-1.0));
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex1 = new FastFourierTransformComplexNumbers.Complex(1184.034196, (-1.0));
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex2 = fastFourierTransformComplexNumbers_Complex0.plus(fastFourierTransformComplexNumbers_Complex1);
      assertNotSame(fastFourierTransformComplexNumbers_Complex0, fastFourierTransformComplexNumbers_Complex2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex((-3616.266006), 0.0);
      // Undeclared exception!
      try { 
        fastFourierTransformComplexNumbers_Complex0.plus((FastFourierTransformComplexNumbers.Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.williamfiset.algorithms.math.FastFourierTransformComplexNumbers$Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex(970.90704442793, 970.90704442793);
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex1 = fastFourierTransformComplexNumbers_Complex0.conjugate();
      assertNotSame(fastFourierTransformComplexNumbers_Complex0, fastFourierTransformComplexNumbers_Complex1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex(0.0, (-1.0));
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex1 = fastFourierTransformComplexNumbers_Complex0.scalar((-1.0));
      assertNotSame(fastFourierTransformComplexNumbers_Complex0, fastFourierTransformComplexNumbers_Complex1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex(2370.003144768, (-219.16506023));
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex1 = new FastFourierTransformComplexNumbers.Complex(2370.003144768, (-219.16506023));
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex2 = fastFourierTransformComplexNumbers_Complex0.minus(fastFourierTransformComplexNumbers_Complex1);
      assertFalse(fastFourierTransformComplexNumbers_Complex2.equals((Object)fastFourierTransformComplexNumbers_Complex1));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex(2945.823941, 2945.823941);
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex1 = new FastFourierTransformComplexNumbers.Complex(2945.823941, 2945.823941);
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex2 = fastFourierTransformComplexNumbers_Complex0.plus(fastFourierTransformComplexNumbers_Complex1);
      assertFalse(fastFourierTransformComplexNumbers_Complex2.equals((Object)fastFourierTransformComplexNumbers_Complex0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex(0.0, 0.0);
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex1 = new FastFourierTransformComplexNumbers.Complex(0.0, 0.0);
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex2 = fastFourierTransformComplexNumbers_Complex0.times(fastFourierTransformComplexNumbers_Complex1);
      assertFalse(fastFourierTransformComplexNumbers_Complex2.equals((Object)fastFourierTransformComplexNumbers_Complex0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex((-15.0), (-15.0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FastFourierTransformComplexNumbers.Complex fastFourierTransformComplexNumbers_Complex0 = new FastFourierTransformComplexNumbers.Complex(1802.4734557548, 1802.4734557548);
      fastFourierTransformComplexNumbers_Complex0.scalar(1802.4734557548);
      fastFourierTransformComplexNumbers_Complex0.conjugate();
      FastFourierTransformComplexNumbers fastFourierTransformComplexNumbers0 = new FastFourierTransformComplexNumbers();
      FastFourierTransformComplexNumbers.Complex[] fastFourierTransformComplexNumbers_ComplexArray0 = new FastFourierTransformComplexNumbers.Complex[2];
      fastFourierTransformComplexNumbers_ComplexArray0[0] = fastFourierTransformComplexNumbers_Complex0;
      fastFourierTransformComplexNumbers_ComplexArray0[1] = fastFourierTransformComplexNumbers_Complex0;
      FastFourierTransformComplexNumbers.Complex[] fastFourierTransformComplexNumbers_ComplexArray1 = FastFourierTransformComplexNumbers.fft(fastFourierTransformComplexNumbers_ComplexArray0);
      assertEquals(2, fastFourierTransformComplexNumbers_ComplexArray1.length);
  }
}
